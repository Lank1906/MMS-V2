import React, { useState, useEffect } from 'react';
import { getUsers, updateUserRole, deleteUser } from '../services/userService';
import '../assets/AdminUserManagementPage.css';

const AdminUserManagementPage = () => {
  const [users, setUsers] = useState([]);
  const [search, setSearch] = useState('');
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);
  const token = localStorage.getItem('token');

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const data = await getUsers(page, 10, search, token);
      setUsers(data.users);
      setTotal(data.total);
    } catch (error) {
      alert('L·ªói t·∫£i danh s√°ch user');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, [page, search]);

  const handleRoleChange = async (id, role) => {
    try {
      await updateUserRole(id, role, token);
      alert('C·∫≠p nh·∫≠t role th√†nh c√¥ng');
      fetchUsers();
    } catch (error) {
      alert('L·ªói c·∫≠p nh·∫≠t role');
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user n√†y?')) {
      try {
        await deleteUser(id, token);
        alert('X√≥a user th√†nh c√¥ng');
        fetchUsers();
      } catch (error) {
        alert('L·ªói x√≥a user');
      }
    }
  };

  return (
    <div className="admin-user-page">
      <div className="header-bar">
        <h2>üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
        <div className="search-bar">
          <input
            type="text"
            placeholder="üîç T√¨m ki·∫øm t√™n ho·∫∑c email..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
      </div>

      {loading ? (
        <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
      ) : (
        <div className="table-container">
          <table className="user-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>T√™n</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Role</th>
                <th>Tr·∫°ng th√°i</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr key={user.user_id}>
                  <td>{user.user_id}</td>
                  <td>{user.username}</td>
                  <td>{user.email}</td>
                  <td>{user.phone}</td>
                  <td>
                    <select value={user.role} onChange={(e) => handleRoleChange(user.user_id, e.target.value)}>
                      <option value="Admin">Admin</option>
                      <option value="Landlord">Landlord</option>
                      <option value="Renter">Renter</option>
                    </select>
                  </td>
                  <td>
                    <span className={`status-badge ${user.is_active ? 'active' : 'inactive'}`}>
                      {user.is_active ? 'Ho·∫°t ƒë·ªông' : 'B·ªã kh√≥a'}
                    </span>
                  </td>
                  <td>
                    <button className="btn btn-delete" onClick={() => handleDelete(user.user_id)}>
                      X√≥a
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <div className="pagination">
        <button disabled={page <= 1} onClick={() => setPage(page - 1)}>
          ‚óÄ Trang tr∆∞·ªõc
        </button>
        <span>Trang {page}</span>
        <button disabled={page * 10 >= total} onClick={() => setPage(page + 1)}>
          Trang sau ‚ñ∂
        </button>
      </div>
    </div>
  );
};

export default AdminUserManagementPage;
